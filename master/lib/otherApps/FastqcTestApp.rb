#!/usr/bin/env ruby
# encoding: utf-8

require 'sushi_fabric'
require_relative 'global_variables'
include GlobalVariables

class FastqcTestApp <  SushiFabric::SushiApp
  def initialize
    super
    @name = 'FastqcTest'
    @params['process_mode'] = 'DATASET'
    @analysis_category = 'QC'
    @description =<<-EOS
A quality control tool for NGS reads<br/>
<a href='http://www.bioinformatics.babraham.ac.uk/projects/fastqc'/>Web-site with docu and a tutorial video</a>
EOS
    @required_columns = ['Name','Read1']
    @required_params = ['paired']
    @params['cores'] = [1, 1, 2, 4, 8]
    @params['ram'] = [15, 30, 62]
    @params['ram', 'description'] = "GB"
    @params['scratch'] = [10, 10, 50, 100]
    @params['scratch', 'description'] = "GB"
    @params['paired'] = false
    @params['showNativeReports'] = false
    @params['showNativeReports', 'description'] = "uses the multi qc summary as primary report; native reports are generated and can be downloaded"
    @params['specialOptions'] = ''
    @params['cmdOptions'] = ""
    @params['mail'] = "masaomi.hatakeyama@uzh.ch"
    @modules = ["QC/FastQC", "Dev/R", "Tools/Picard", "Tools/samtools", "Dev/Python",  "QC/fastp"]
    @inherit_columns = ["Order Id"]
  end
 def set_default_parameters
    @params['paired'] = dataset_has_column?('Read2')
  end
  def preprocess
    if @params['paired']
      @required_columns<<  'Read2'
    end
  end
  def next_dataset
    @params['name'] = 'FastQC'
    fastqc_file = File.join(@result_dir, @params['name'])
    multiqc_file = File.join(@result_dir, 'multi_FastQC')
    if @params['showNativeReports']
      ds = {'Name'=>@params['name'],
        'MultiQC Report [Link]'=>File.join(multiqc_file, 'multiqc_report.html'), ## that's the default name generated by the multiqc tool
        'FastQC Report [Link]'=>File.join(fastqc_file, 'fastqc.html'),
        'MultiQC [File]'=>multiqc_file,
        'FastQC [File]'=>fastqc_file
      }
    else
      ds = {'Name'=>@params['name'],
        'MultiQC Report [Link]'=>File.join(multiqc_file, 'multiqc_report.html'),
        'MultiQC [File]'=>multiqc_file,
        'FastQC [File]'=>fastqc_file
      }
    end
    ds.merge(extract_columns(colnames: @inherit_columns))
  end
  def grandchild_datasets
    @grandchild = true
    grandchild_data = []

    return grandchild_data unless @result_dataset && !@result_dataset.empty?

    @result_dataset.each do |_row|
      # First grandchild dataset - summary statistics
      summary_file = File.join(@result_dir, 'summary_stats')

      grandchild_data << {
        'Name' => grandchild_base_name,
        'Summary Report [Link]' => File.join(summary_file, 'summary.html'),
        'Summary [File]' => summary_file
      }
    end

    # set_default_grandchild_names_by_dataset!(grandchild_data)
    grandchild_data
  end
  def commands
    commands = ""
    # Create dummy outputs for grandchild datasets so copy phase won't fail
    commands << "mkdir -p summary_stats\n"
    commands << "echo '<html><body>Dummy summary</body></html>' > summary_stats/summary.html\n"
    if @params['showNativeReports']
      commands << "mkdir -p detailed_analysis\n"
      commands << "echo '<html><body>Dummy details</body></html>' > detailed_analysis/details.html\n"
    end
    commands << "\n"
    commands << run_RApp("EzAppFastqc")
    commands
  end
end

if __FILE__ == $0
  usecase = FastqcApp.new

  usecase.project = "p1001"
  usecase.user = "masa"

  # set user parameter
  # for GUI sushi
  #usecase.params['process_mode'].value = 'SAMPLE'
  #usecase.params['refBuild'] = 'TAIR10'
  #usecase.params['paired'] = true
  #usecase.params['cores'] = 2
  #usecase.params['node'] = 'fgcz-c-048'

  # also possible to load a parameterset csv file
  # mainly for CUI sushi
  usecase.parameterset_tsv_file = 'tophat_parameterset.tsv'
  #usecase.params['name'] = 'name'

  # set input dataset
  # mainly for CUI sushi
  usecase.dataset_tsv_file = 'tophat_dataset.tsv'

  # also possible to load a input dataset from Sushi DB
  #usecase.dataset_sushi_id = 1

  # run (submit to workflow_manager)
  usecase.run
  #usecase.test_run

end
